{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to cosmo_ml_tools","text":"<p>A python package that wraps many po useful ML packaagages and algorithms in cosmology.</p> <ul> <li>Free software: MIT License</li> <li>Documentation: https://rcalderonb6.github.io/cosmo_ml_tools</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>TODO</li> </ul>"},{"location":"analysis/","title":"Analysis module","text":""},{"location":"analysis/#cosmo_ml_tools.analysis.base.AnalysisBase","title":"<code> AnalysisBase            (ABC)         </code>","text":"<p>Abstract Analysis Class</p> Source code in <code>cosmo_ml_tools/analysis/base.py</code> <pre><code>class AnalysisBase(ABC):\n    \"\"\"\n    Abstract Analysis Class\n    \"\"\"\n    def __init__(self) -&gt; None:\n        pass\n\n    def set_labels(self,labels) -&gt; None:\n        self._labels=labels\n\n    @abstractmethod\n    def computeEvidence(self,chain:str=None) -&gt; None:\n        \"\"\"Compute the Bayesian Evidence for the chains.\"\"\"\n        ...\n\n    @abstractmethod\n    def load(self,chains:list[str]) -&gt; None:\n        \"\"\"\n        Load a given set of chains.\n        \"\"\"\n        ...    \n\n    @abstractmethod\n    def add_chain(chain:str,label:str,root:str):\n        ...\n\n    @abstractmethod\n    def plot_triangle(self,params:list[str]=None):\n        \"\"\"\n        Triangle plot for the specified subset of parameters.\n        \"\"\"\n        ...    \n\n    @abstractmethod\n    def plot_2D(self,params:list[str]):\n        \"\"\"\n        Plot the 2D marginalized posteriors.\n        \"\"\"\n        ...    \n\n    @abstractmethod\n    def plot_posterior_y(self,x,f,theta):\n        \"\"\"\n        Plot the posterior distribution of a given function y = f(x,theta)\n        from MCMC samples of theta using the ``f_given_x`` package.\n        \"\"\"\n        ...    \n\n    @abstractmethod\n    def _getGelmanRubin(self):\n        \"\"\"Computee the Gelman-Rubin (R-1) statistics for the chains\"\"\"\n        ...   \n\n    @abstractmethod\n    def getInfo(self):\n        \"\"\"\n        Print useful information about the chains loaded.\n        \"\"\"\n        ...    \n\n    @abstractmethod\n    def set_aliases(self,aliases:dict) -&gt; None:\n        \"\"\"\n        Set aliases for the chains\n        \"\"\"\n        ...        \n\n    @property\n    def GelmanRubin(self) -&gt; list:\n        \"\"\"\n        Gelman Rubin (R-1) statistics for the chains loaded.\n        \"\"\"\n        self._getGelmanRubin(self)\n\n    @property\n    def chains(self) -&gt; dict:\n        \"\"\"\n        The chains stored as a dictionary with labels as keys.\n        \"\"\"\n        return self._chains\n\n    @property\n    def labels(self) -&gt; list:\n        \"\"\"\n        Labels for the chains that are loaded.\n        \"\"\"\n        return self._labels\n\n    @property\n    def filenames(self)-&gt; list:\n        \"\"\"\n        List of filenames for the chains, as stored on the disk.\n        \"\"\"\n        return self._filenames\n\n    @property\n    def N(self) -&gt; int:\n        \"\"\"\n        Number of chains loaded.\n        \"\"\"\n        return len(self._labels)\n</code></pre>"},{"location":"analysis/#cosmo_ml_tools.analysis.base.AnalysisBase.GelmanRubin","title":"<code>GelmanRubin: list</code>  <code>property</code> <code>readonly</code>","text":"<p>Gelman Rubin (R-1) statistics for the chains loaded.</p>"},{"location":"analysis/#cosmo_ml_tools.analysis.base.AnalysisBase.N","title":"<code>N: int</code>  <code>property</code> <code>readonly</code>","text":"<p>Number of chains loaded.</p>"},{"location":"analysis/#cosmo_ml_tools.analysis.base.AnalysisBase.chains","title":"<code>chains: dict</code>  <code>property</code> <code>readonly</code>","text":"<p>The chains stored as a dictionary with labels as keys.</p>"},{"location":"analysis/#cosmo_ml_tools.analysis.base.AnalysisBase.filenames","title":"<code>filenames: list</code>  <code>property</code> <code>readonly</code>","text":"<p>List of filenames for the chains, as stored on the disk.</p>"},{"location":"analysis/#cosmo_ml_tools.analysis.base.AnalysisBase.labels","title":"<code>labels: list</code>  <code>property</code> <code>readonly</code>","text":"<p>Labels for the chains that are loaded.</p>"},{"location":"analysis/#cosmo_ml_tools.analysis.base.AnalysisBase.computeEvidence","title":"<code>computeEvidence(self, chain=None)</code>","text":"<p>Compute the Bayesian Evidence for the chains.</p> Source code in <code>cosmo_ml_tools/analysis/base.py</code> <pre><code>@abstractmethod\ndef computeEvidence(self,chain:str=None) -&gt; None:\n    \"\"\"Compute the Bayesian Evidence for the chains.\"\"\"\n    ...\n</code></pre>"},{"location":"analysis/#cosmo_ml_tools.analysis.base.AnalysisBase.getInfo","title":"<code>getInfo(self)</code>","text":"<p>Print useful information about the chains loaded.</p> Source code in <code>cosmo_ml_tools/analysis/base.py</code> <pre><code>@abstractmethod\ndef getInfo(self):\n    \"\"\"\n    Print useful information about the chains loaded.\n    \"\"\"\n    ...    \n</code></pre>"},{"location":"analysis/#cosmo_ml_tools.analysis.base.AnalysisBase.load","title":"<code>load(self, chains)</code>","text":"<p>Load a given set of chains.</p> Source code in <code>cosmo_ml_tools/analysis/base.py</code> <pre><code>@abstractmethod\ndef load(self,chains:list[str]) -&gt; None:\n    \"\"\"\n    Load a given set of chains.\n    \"\"\"\n    ...    \n</code></pre>"},{"location":"analysis/#cosmo_ml_tools.analysis.base.AnalysisBase.plot_2D","title":"<code>plot_2D(self, params)</code>","text":"<p>Plot the 2D marginalized posteriors.</p> Source code in <code>cosmo_ml_tools/analysis/base.py</code> <pre><code>@abstractmethod\ndef plot_2D(self,params:list[str]):\n    \"\"\"\n    Plot the 2D marginalized posteriors.\n    \"\"\"\n    ...    \n</code></pre>"},{"location":"analysis/#cosmo_ml_tools.analysis.base.AnalysisBase.plot_posterior_y","title":"<code>plot_posterior_y(self, x, f, theta)</code>","text":"<p>Plot the posterior distribution of a given function y = f(x,theta) from MCMC samples of theta using the <code>f_given_x</code> package.</p> Source code in <code>cosmo_ml_tools/analysis/base.py</code> <pre><code>@abstractmethod\ndef plot_posterior_y(self,x,f,theta):\n    \"\"\"\n    Plot the posterior distribution of a given function y = f(x,theta)\n    from MCMC samples of theta using the ``f_given_x`` package.\n    \"\"\"\n    ...    \n</code></pre>"},{"location":"analysis/#cosmo_ml_tools.analysis.base.AnalysisBase.plot_triangle","title":"<code>plot_triangle(self, params=None)</code>","text":"<p>Triangle plot for the specified subset of parameters.</p> Source code in <code>cosmo_ml_tools/analysis/base.py</code> <pre><code>@abstractmethod\ndef plot_triangle(self,params:list[str]=None):\n    \"\"\"\n    Triangle plot for the specified subset of parameters.\n    \"\"\"\n    ...    \n</code></pre>"},{"location":"analysis/#cosmo_ml_tools.analysis.base.AnalysisBase.set_aliases","title":"<code>set_aliases(self, aliases)</code>","text":"<p>Set aliases for the chains</p> Source code in <code>cosmo_ml_tools/analysis/base.py</code> <pre><code>@abstractmethod\ndef set_aliases(self,aliases:dict) -&gt; None:\n    \"\"\"\n    Set aliases for the chains\n    \"\"\"\n    ...        \n</code></pre>"},{"location":"analysis/#cosmo_ml_tools.analysis.base.ChainBase","title":"<code> ChainBase            (ABC)         </code>","text":"<p>Abstract Base Chain Class</p> Source code in <code>cosmo_ml_tools/analysis/base.py</code> <pre><code>class ChainBase(ABC):\n    \"\"\"\n    Abstract Base Chain Class\n    \"\"\"\n    def __init__(self):\n        pass\n\n    @abstractmethod\n    def load(self):\n        \"\"\"Load the chain using the engine of your choice\"\"\"\n        ...\n\n    @abstractmethod\n    def to_harmonic(self):\n        \"\"\"\n        A method that returns the samples and corresponding posterior values in a Harmonic-friendly format.\n        \"\"\"\n        ...\n\n    @abstractmethod\n    def set_param_labels(self,labels:list[str]):\n        \"\"\"Set the labels for the parameters\"\"\"\n        ...\n\n    @abstractmethod\n    def set_label(self):\n        \"\"\"Set the label for the chain\"\"\"\n        ...\n\n    @abstractmethod\n    def set_alias(self):\n        \"\"\"\n        Set an alias, or shorter name of the chain for quickly reference (useful for long data combinations)\n        \"\"\"\n        ...\n\n    @abstractmethod\n    def getInfo(self):\n        \"\"\"\n        Print a summary of useful information on the chain.\n        \"\"\"\n        ...\n\n    @abstractmethod\n    def getTable(self,params:list):\n        \"\"\"\n        Print a latex table with the mean and 68% CL.\n        \"\"\"\n        ...\n</code></pre>"},{"location":"analysis/#cosmo_ml_tools.analysis.base.ChainBase.getInfo","title":"<code>getInfo(self)</code>","text":"<p>Print a summary of useful information on the chain.</p> Source code in <code>cosmo_ml_tools/analysis/base.py</code> <pre><code>@abstractmethod\ndef getInfo(self):\n    \"\"\"\n    Print a summary of useful information on the chain.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"analysis/#cosmo_ml_tools.analysis.base.ChainBase.getTable","title":"<code>getTable(self, params)</code>","text":"<p>Print a latex table with the mean and 68% CL.</p> Source code in <code>cosmo_ml_tools/analysis/base.py</code> <pre><code>@abstractmethod\ndef getTable(self,params:list):\n    \"\"\"\n    Print a latex table with the mean and 68% CL.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"analysis/#cosmo_ml_tools.analysis.base.ChainBase.load","title":"<code>load(self)</code>","text":"<p>Load the chain using the engine of your choice</p> Source code in <code>cosmo_ml_tools/analysis/base.py</code> <pre><code>@abstractmethod\ndef load(self):\n    \"\"\"Load the chain using the engine of your choice\"\"\"\n    ...\n</code></pre>"},{"location":"analysis/#cosmo_ml_tools.analysis.base.ChainBase.set_alias","title":"<code>set_alias(self)</code>","text":"<p>Set an alias, or shorter name of the chain for quickly reference (useful for long data combinations)</p> Source code in <code>cosmo_ml_tools/analysis/base.py</code> <pre><code>@abstractmethod\ndef set_alias(self):\n    \"\"\"\n    Set an alias, or shorter name of the chain for quickly reference (useful for long data combinations)\n    \"\"\"\n    ...\n</code></pre>"},{"location":"analysis/#cosmo_ml_tools.analysis.base.ChainBase.set_label","title":"<code>set_label(self)</code>","text":"<p>Set the label for the chain</p> Source code in <code>cosmo_ml_tools/analysis/base.py</code> <pre><code>@abstractmethod\ndef set_label(self):\n    \"\"\"Set the label for the chain\"\"\"\n    ...\n</code></pre>"},{"location":"analysis/#cosmo_ml_tools.analysis.base.ChainBase.set_param_labels","title":"<code>set_param_labels(self, labels)</code>","text":"<p>Set the labels for the parameters</p> Source code in <code>cosmo_ml_tools/analysis/base.py</code> <pre><code>@abstractmethod\ndef set_param_labels(self,labels:list[str]):\n    \"\"\"Set the labels for the parameters\"\"\"\n    ...\n</code></pre>"},{"location":"analysis/#cosmo_ml_tools.analysis.base.ChainBase.to_harmonic","title":"<code>to_harmonic(self)</code>","text":"<p>A method that returns the samples and corresponding posterior values in a Harmonic-friendly format.</p> Source code in <code>cosmo_ml_tools/analysis/base.py</code> <pre><code>@abstractmethod\ndef to_harmonic(self):\n    \"\"\"\n    A method that returns the samples and corresponding posterior values in a Harmonic-friendly format.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"analysis/#cosmo_ml_tools.analysis.chain.Chain","title":"<code> Chain        </code>","text":"<p>A Base class for Chain</p> Source code in <code>cosmo_ml_tools/analysis/chain.py</code> <pre><code>class Chain:\n    \"\"\"\n    A Base class for Chain\n    \"\"\"\n    def __init__(self):\n        pass\n</code></pre>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#v001-date","title":"v0.0.1 - Date","text":"<p>Improvement:</p> <ul> <li>TBD</li> </ul> <p>New Features:</p> <ul> <li>TBD</li> </ul>"},{"location":"common/","title":"common module","text":"<p>The common module contains common functions and classes used by the other modules.</p>"},{"location":"common/#cosmo_ml_tools.common.bye_world","title":"<code>bye_world()</code>","text":"<p>Prints \"Bye World!\" to the console.</p> Source code in <code>cosmo_ml_tools/common.py</code> <pre><code>def bye_world():\n    \"\"\"Prints \"Bye World!\" to the console.\n    \"\"\"\n    print(\"Bye World!\")\n</code></pre>"},{"location":"common/#cosmo_ml_tools.common.hello_world","title":"<code>hello_world()</code>","text":"<p>Prints \"Hello World!\" to the console.</p> Source code in <code>cosmo_ml_tools/common.py</code> <pre><code>def hello_world():\n    \"\"\"Prints \"Hello World!\" to the console.\n    \"\"\"\n    print(\"Hello World!\")\n</code></pre>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/rcalderonb6/cosmo_ml_tools/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with <code>bug</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with <code>enhancement</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>cosmo-ml-tools could always use more documentation, whether as part of the official cosmo-ml-tools docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/rcalderonb6/cosmo_ml_tools/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up cosmo_ml_tools for local development.</p> <ol> <li> <p>Fork the cosmo_ml_tools repo on GitHub.</p> </li> <li> <p>Clone your fork locally:</p> <pre><code>$ git clone git@github.com:your_name_here/cosmo_ml_tools.git\n</code></pre> </li> <li> <p>Install your local copy into a virtualenv. Assuming you have     virtualenvwrapper installed, this is how you set up your fork for     local development:</p> <pre><code>$ mkvirtualenv cosmo_ml_tools\n$ cd cosmo_ml_tools/\n$ python setup.py develop\n</code></pre> </li> <li> <p>Create a branch for local development:</p> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> </li> <li> <p>When you're done making changes, check that your changes pass flake8     and the tests, including testing other Python versions with tox:</p> <pre><code>$ flake8 cosmo_ml_tools tests\n$ python setup.py test or pytest\n$ tox\n</code></pre> <p>To get flake8 and tox, just pip install them into your virtualenv.</p> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated.     Put your new functionality into a function with a docstring, and add     the feature to the list in README.rst.</li> <li>The pull request should work for Python 3.8 and later, and     for PyPy. Check https://github.com/rcalderonb6/cosmo_ml_tools/pull_requests and make sure that the tests pass for all     supported Python versions.</li> </ol>"},{"location":"cosmo_ml_tools/","title":"cosmo_ml_tools module","text":"<p>Main module.</p>"},{"location":"cosmology/","title":"Cosmology module","text":"<p>Cosmology module.</p>"},{"location":"faq/","title":"FAQ","text":""},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install cosmo-ml-tools, run this command in your terminal:</p> <pre><code>pip install cosmo_ml_tools\n</code></pre> <p>This is the preferred method to install cosmo-ml-tools, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-sources","title":"From sources","text":"<p>To install cosmo-ml-tools from sources, run this command in your terminal:</p> <pre><code>pip install git+https://github.com/rcalderonb6/cosmo_ml_tools\n</code></pre>"},{"location":"plots/","title":"Plotting module","text":"<p>Plotting module.</p>"},{"location":"stats/","title":"Statistics module","text":"<p>Statistics module.</p>"},{"location":"stats/#cosmo_ml_tools.stats.gp","title":"<code>gp</code>","text":""},{"location":"stats/#cosmo_ml_tools.stats.gp.GaussianProcess","title":"<code>GaussianProcess(ABC)</code>","text":"<p>Gaussian Process Abstract Base class</p> Source code in <code>cosmo_ml_tools/stats/gp.py</code> <pre><code>def GaussianProcess(ABC):\n    \"\"\"Gaussian Process Abstract Base class\"\"\"\n\n    def __init__(self):\n        pass\n\n    @abstractmethod\n    def fit(self):\n        ...\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>To use cosmo-ml-tools in a project:</p> <pre><code>import cosmo_ml_tools\n</code></pre>"},{"location":"utils/","title":"Utilities module","text":"<p>Utilities module.</p>"},{"location":"utils/#cosmo_ml_tools.utils.table","title":"<code>table</code>","text":""},{"location":"utils/#cosmo_ml_tools.utils.table.get_latex_table","title":"<code>get_latex_table(samples, parameters, param_labels=None)</code>","text":"<p>Get a latex table with mean and 68% credible intervals constraints for a given set of chains and cosmological parameters.</p> <p>samples: dictionary, a dictionary with getdist instances with the chains.  The corresponding dictionary keys are used as labels.</p> <p>parameters: list, a list with parameter names you want to include in the table</p> <p>param_labels: list (optional), a list with latex names for each of the requested parameters.  If none, its name on the chain is used.</p> Source code in <code>cosmo_ml_tools/utils/table.py</code> <pre><code>def get_latex_table(samples,parameters,param_labels=None):\n    \"\"\"\n    Get a latex table with mean and 68% credible intervals constraints for a given set of chains and cosmological parameters.\n\n    samples: dictionary, a dictionary with getdist instances with the chains. \n    The corresponding dictionary keys are used as labels.\n\n    parameters: list, a list with parameter names you want to include in the table\n\n    param_labels: list (optional), a list with latex names for each of the requested parameters. \n    If none, its name on the chain is used.\n\n    \"\"\"\n    Nparams=len(parameters)\n    cols='l'+'c' * Nparams\n\n    print(r'\\begin{table*}[t]')\n    print(r'\\caption{68\\% credible intervals for the cosmological parameters,\\\n        using various dataset combinations.','\\n',r'\\vspace{0.5em}}')\n    print(r'\\label{tab:tab_label}')\n    print(r'\\centering')\n    print(r'\\small')\n    print(r'\\resizebox{0.95\\textwidth}{!}{')\n    print(r'\\begin{tabular}'+r'{%s}'%cols)\n    print(r'\\toprule')\n    print(r'\\toprule')\n    line='Dataset'\n    params=parameters if param_labels is None else param_labels\n    for p in params:\n        line+=f' &amp; {p}'\n    print(line+r' \\\\')\n    print(r'\\midrule[1.5pt]')\n    for lbl,chain in samples.items():\n        line=f'{lbl}'   \n        for p in parameters:\n            stats=chain.getInlineLatex(p,limit=1).split('=')[1].strip()\n            line+=f' &amp; ${stats}$ '\n        print(line+r' \\\\')\n        if lbl != list(samples.keys())[-1]: print(r'\\midrule')\n    print(r'\\toprule')\n    print(r'\\toprule')\n    print(r'\\end{tabular}}')\n    print(r'\\end{table*}')\n</code></pre>"},{"location":"workflows/","title":"Workflows module","text":"<p>Workflows module.</p>"},{"location":"examples/intro/","title":"Intro","text":"In\u00a0[1]: Copied! <pre>print('Hello World!')\n</pre> print('Hello World!') <pre>Hello World!\n</pre>"}]}